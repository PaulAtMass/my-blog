{"version":3,"sources":["Pages/HomePage.js","Pages/AboutPage.js","Pages/article-content.js","Components/ArticlesList.js","Pages/ArticlesListPage.js","Pages/NotFoundPage.js","Components/CommentsList.js","Components/UpvotesSection.js","Components/AddCommentForm.js","Pages/ArticlePage.js","NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["HomePage","Fragment","AboutPage","articles","name","title","content","ArticlesList","map","article","key","className","to","substr","ArticleListPage","ArticleContent","NotFoundPage","CommentsList","comments","comment","username","text","UpvotesSection","articleName","upvotes","setArticleInfo","upvoteArticle","a","fetch","method","result","json","resbody","id","onClick","AddCommentForm","useState","setUsername","commentText","setCommentText","addComponent","console","log","body","JSON","stringify","headers","type","value","onChange","event","target","rows","cols","ArticlePage","match","params","articleContent","find","articleInfo","useEffect","fetchData","otherArticles","filter","paragraph","NavBar","App","path","component","exact","ArticlesListPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAYeA,EAVE,WACd,OACA,eAAC,IAAMC,SAAP,WACK,2DACA,sFCMOC,EAVG,WACf,OACA,eAAC,IAAMD,SAAP,WACK,0CACA,8DCsEOE,EA5EE,CACb,CACIC,KAAM,cACNC,MAAO,iCACPC,QAAS,CAAC,0hBAAD,mgCAqBP,CACFF,KAAM,aACNC,MAAO,2CACPC,QAAS,CAAC,8iBAAD,mgCAqBN,CACHF,KAAM,yBACNC,MAAO,yBACPC,QAAS,CAAC,6iBAAD,ogCCrCFC,EAZM,SAAC,GAAD,IAAEJ,EAAF,EAAEA,SAAF,OACjB,mCACKA,EAASK,KAAK,SAACC,EAASC,GAAV,OAEX,cADA,CACC,IAAD,CAAgBC,UAAU,oBAAoBC,GAAE,mBAAcH,EAAQL,MAAtE,UACI,6BAAKK,EAAQJ,QACb,8BAAII,EAAQH,QAAQ,GAAGO,OAAO,EAAG,KAAjC,WAFOH,SCQRI,EAVS,WACrB,OACA,eAAC,IAAMb,SAAP,WACK,0CAEA,cAAC,EAAD,CAAcE,SAAUY,Q,gCCJjBC,EAJM,kBACjB,uDCcWC,EAdM,SAAC,GAAoB,IAAjBC,EAAgB,EAAhBA,SACrB,OACI,qCACA,2CACEA,EAASV,KAAK,SAACW,EAAST,GAAV,OACZ,sBAAKC,UAAU,UAAf,UACI,6BAAKQ,EAAQC,WACb,4BAAID,EAAQE,SAFcX,UCY3BY,EAjBQ,SAAC,GAA4C,IAA3CC,EAA0C,EAA1CA,YAAaC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,eACrCC,EAAa,uCAAG,8BAAAC,EAAA,sEACGC,MAAM,iBAAD,OAAkBL,EAAlB,WAAwC,CAC9DM,OAAQ,SAFM,cACZC,EADY,gBAKIA,EAAOC,OALX,OAKZC,EALY,OAMjBP,EAAeO,GANE,2CAAH,qDAQnB,OACI,sBAAKC,GAAG,kBAAR,UACA,wBAAQC,QAAU,kBAAMR,KAAxB,wBACA,4DAA+BF,EAA/B,iBC2BOW,EAtCQ,SAAC,GAAmC,IAAlCZ,EAAiC,EAAjCA,YAAaE,EAAoB,EAApBA,eAClC,EAAgCW,mBAAS,IAAzC,mBAAOhB,EAAP,KAAiBiB,EAAjB,KACA,EAAsCD,mBAAS,IAA/C,mBAAOE,EAAP,KAAoBC,EAApB,KAGMC,EAAY,uCAAG,8BAAAb,EAAA,6DAEjBc,QAAQC,IAAR,kBAAuBnB,IAFN,SAGIK,MAAM,iBAAD,OAAkBL,EAAlB,gBACtB,CACIM,OAAQ,OACRc,KAAMC,KAAKC,UAAU,CAACzB,WAAUC,KAAMiB,IACtCQ,QAAS,CACL,eAAgB,sBARX,cAGXhB,EAHW,gBAWEA,EAAOC,OAXT,OAWXY,EAXW,OAYjBlB,EAAekB,GACfN,EAAY,IACZE,EAAe,IAdE,4CAAH,qDAiBlB,OACI,sBAAKN,GAAG,mBAAR,UACI,+CACA,0CACI,uBAAOc,KAAK,OAAOC,MAAO5B,EACtB6B,SAAU,SAACC,GAAD,OAAWb,EAAYa,EAAMC,OAAOH,aAEtD,6CACI,0BAAUI,KAAK,IAAIC,KAAK,KAAKL,MAAOV,EAChCW,SAAU,SAACC,GAAD,OAAWX,EAAeW,EAAMC,OAAOH,aAEzD,wBAAQd,QAAS,kBAAMM,KAAvB,6BCmBGc,EA9CK,SAAC,GAAe,IAE1BlD,EAFyB,EAAZmD,MAEAC,OAAOpD,KAGpBK,EAAUgD,EAAeC,MAAK,SAAAjD,GAAO,OAAIA,EAAQL,OAASA,KAGhE,EAAsCgC,mBAAS,CAAEZ,QAAS,EAAGN,SAAU,KAAvE,mBAAOyC,EAAP,KAAoBlC,EAApB,KAeA,GAXAmC,qBAAW,YAEM,uCAAG,8BAAAjC,EAAA,sEACMC,MAAM,iBAAD,OAAkBxB,IAD7B,cACT0B,EADS,gBAEIA,EAAOC,OAFX,OAETY,EAFS,OAGflB,EAAekB,GAHA,2CAAH,qDAKfkB,KACC,CAACzD,IAGmB,qBAAZK,EAA2B,OAAQ,cAAC,EAAD,IAI9C,IAAMqD,EAAgBL,EAAeM,QAAQ,SAAAtD,GAAO,OAAKA,EAAQL,OAASA,KAC1E,OACI,eAAC,IAAMH,SAAP,WACQ,6BAAKQ,EAAQJ,QACb,cAAC,EAAD,CAAgBkB,YAAanB,EAAMoB,QAASmC,EAAYnC,QAASC,eAAgBA,IAEhFhB,EAAQH,QAAQE,KAAK,SAACwD,EAAWtD,GAAZ,OAClB,4BAAcsD,GAANtD,MAEX,cAAC,EAAD,CAAcQ,SAAUyC,EAAYzC,WACpC,cAAC,EAAD,CAAgBK,YAAanB,EAAMqB,eAAgBA,IACpD,gEACA,4BAAIhB,EAAQH,UACZ,gDACA,cAAC,EAAD,CAAcH,SAAU2D,QCjCzBG,EAfA,WACX,OACA,8BACI,6BACI,+BACI,cAAC,IAAD,CAAMrD,GAAG,IAAT,kBACA,cAAC,IAAD,CAAMA,GAAG,SAAT,mBACA,cAAC,IAAD,CAAMA,GAAG,oBAAT,sBACA,cAAC,IAAD,CAAMA,GAAG,qB,MCwBVsD,MAvBf,WACE,OAEE,aADA,CACC,IAAD,UACE,sBAAKvD,UAAU,MAAf,UACE,cAAC,EAAD,IACA,qBAAKsB,GAAG,YAAR,SAEA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOkC,KAAK,IAAIC,UAAWpE,EAAUqE,OAAK,IAC1C,cAAC,IAAD,CAAOF,KAAK,SAASC,UAAWlE,IAChC,cAAC,IAAD,CAAOiE,KAAK,oBAAoBC,UAAWE,IAE3C,cAAC,IAAD,CAAOH,KAAK,iBAAiBC,UAAWd,IAExC,cAAC,IAAD,CAAOc,UAAWpD,eCfbuD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e5683f41.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst HomePage = () => {\r\n   return (\r\n   <React.Fragment>\r\n        <h1>Hello, Welcome to my Blog</h1>\r\n        <p>Welcome to my blog! This is an opening paragraph.</p>\r\n\r\n    </React.Fragment>\r\n   );\r\n}\r\n\r\nexport default HomePage;","import React from 'react';\r\n\r\nconst AboutPage = () => {\r\n   return (\r\n   <React.Fragment>\r\n        <h1>About Me</h1>\r\n        <p>Welcome to about me page.</p>\r\n\r\n    </React.Fragment>\r\n   );\r\n}\r\n\r\nexport default AboutPage;","const articles = [\n    {\n        name: 'learn-react',\n        title: 'The Fastest Way to Learn React',\n        content: [\n            `Welcome! Today we're going to be talking about the fastest way to\n            learn React. We'll be discussing some topics such as proin congue\n            ligula id risus posuere, vel eleifend ex egestas. Sed in turpis leo. \n            Aliquam malesuada in massa tincidunt egestas. Nam consectetur varius turpis, \n            non porta arcu porttitor non. In tincidunt vulputate nulla quis egestas. Ut \n            eleifend ut ipsum non fringilla. Praesent imperdiet nulla nec est luctus, at \n            sodales purus euismod.`,\n            `Donec vel mauris lectus. Etiam nec lectus urna. Sed sodales ultrices dapibus. \n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\n            `Etiam nec lectus urna. Sed sodales ultrices dapibus. \n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\n        ]\n    },    {\n        name: 'learn-node',\n        title: 'How to Build a Node Server in 10 Minutes',\n        content: [\n            `In this article, we're going to be talking looking at a very quick way\n            to set up a Node.js server. We'll be discussing some topics such as proin congue\n            ligula id risus posuere, vel eleifend ex egestas. Sed in turpis leo. \n            Aliquam malesuada in massa tincidunt egestas. Nam consectetur varius turpis, \n            non porta arcu porttitor non. In tincidunt vulputate nulla quis egestas. Ut \n            eleifend ut ipsum non fringilla. Praesent imperdiet nulla nec est luctus, at \n            sodales purus euismod.`,\n            `Donec vel mauris lectus. Etiam nec lectus urna. Sed sodales ultrices dapibus. \n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\n            `Etiam nec lectus urna. Sed sodales ultrices dapibus. \n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\n        ]\n    },     {\n        name: 'my-thoughts-on-resumes',\n        title: 'My Thoughts on Resumes',\n        content: [\n            `Today is the day I talk about something which scares most people: resumes.\n            In reality, I'm not sure why people have such a hard time with proin congue\n            ligula id risus posuere, vel eleifend ex egestas. Sed in turpis leo. \n            Aliquam malesuada in massa tincidunt egestas. Nam consectetur varius turpis, \n            non porta arcu porttitor non. In tincidunt vulputate nulla quis egestas. Ut \n            eleifend ut ipsum non fringilla. Praesent imperdiet nulla nec est luctus, at \n            sodales purus euismod.`,\n            `Donec vel mauris lectus. Etiam nec lectus urna. Sed sodales ultrices dapibus. \n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\n            `Etiam nec lectus urna. Sed sodales ultrices dapibus. \n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\n        ]\n    },  \n];\n\nexport default articles;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ArticlesList = ({articles}) => (\r\n    <>\r\n        {articles.map( (article, key) => (\r\n            /* NOTE: JSX string concatination have to use backticks ` not quote/double quotes. */ \r\n            <Link key={key} className=\"article-list-item\" to={`/article/${article.name}`} >\r\n                <h3>{article.title}</h3>\r\n                <p>{article.content[0].substr(0, 150)}...</p>\r\n            </Link>\r\n        ))}\r\n    </>\r\n);\r\n\r\nexport default ArticlesList;","import React from 'react';\r\nimport ArticleContent from './article-content';\r\nimport ArticlesList from '../Components/ArticlesList.js';\r\n\r\n\r\nconst ArticleListPage = () => {\r\n   return (\r\n   <React.Fragment>\r\n        <h1>Articles</h1>\r\n        {/* Pass the articles content as a propety to the ArticlesList component.  */}\r\n        <ArticlesList articles={ArticleContent} />\r\n    </React.Fragment>\r\n   );\r\n}\r\n\r\nexport default ArticleListPage;","import React from 'react';\r\n\r\nconst NotFoundPage = () => (\r\n    <h1>404: Page Not Found!</h1>\r\n);\r\n\r\nexport default NotFoundPage;","import React from 'react';\r\n\r\n// Define a comments list component, passing the article info comments as a prop.\r\nconst CommentsList = ( { comments } ) => {\r\n    return (\r\n        <>\r\n        <h3>Comments:</h3>\r\n        { comments.map( (comment, key) => (\r\n            <div className=\"comment\" key={key} >\r\n                <h4>{comment.username}</h4>\r\n                <p>{comment.text}</p>\r\n            </div>\r\n        ) ) }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CommentsList;","import React from 'react';\r\n\r\n// When user clicks the button call async fetch POST HTTP request to the server to upvote the article.\r\nconst UpvotesSection = ({articleName, upvotes, setArticleInfo}) => {\r\n    const upvoteArticle = async () => {\r\n        const result = await fetch(`/api/articles/${articleName}/upvote`, {\r\n            method: 'post'\r\n        });\r\n        /* Returns the updated article info in response HTTP body. Convert it from string to JSON. */\r\n        const resbody = await result.json();\r\n         setArticleInfo(resbody);\r\n    }\r\n    return(\r\n        <div id=\"upvotes-section\">\r\n        <button onClick={ () => upvoteArticle() }>Add Upvote</button>\r\n        <p>This post has been upvoted {upvotes} times!</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UpvotesSection;","import React, { useState } from 'react';\r\n\r\n// Add a comment form takes a user name and their comment and updates the component state using\r\n//onchange event handlers for input text and text area fields.\r\nconst AddCommentForm = ({articleName, setArticleInfo}) => {\r\n    const [username, setUsername] = useState('');\r\n    const [commentText, setCommentText] = useState('');\r\n\r\n    // Ddefine async function that calls API with HTTP post comment. Add Comment button can call this.\r\n    const addComponent = async () => {\r\n        // Need to tell server its a JSON content body not standard HTML/string.\r\n        console.log(`Article=${articleName}`);\r\n        const result = await fetch(`/api/articles/${articleName}/add-comment`,\r\n            { \r\n                method: 'post',\r\n                body: JSON.stringify({username, text: commentText}),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            } );\r\n        const body = await result.json();\r\n        setArticleInfo(body);\r\n        setUsername('');\r\n        setCommentText('');\r\n    }\r\n\r\n    return (\r\n        <div id=\"add-comment-form\">\r\n            <h3>Add a Comment</h3>\r\n            <label>Name: \r\n                <input type=\"text\" value={username} \r\n                    onChange={(event) => setUsername(event.target.value)}/>\r\n                </label>\r\n            <label>Comment: \r\n                <textarea rows=\"4\" cols=\"50\" value={commentText} \r\n                    onChange={(event) => setCommentText(event.target.value)}/>\r\n            </label>\r\n            <button onClick={() => addComponent()}>Add Comment</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddCommentForm;","/* Defines single reusable article react component which is used for each article.  \r\n   An article is specified using URL parameters, it uses the name parameter which is passed using the Match props. */\r\nimport React , { useState, useEffect } from 'react';\r\nimport articleContent from './article-content';\r\nimport ArticlesList from '../Components/ArticlesList.js';\r\nimport NotFoundPage from './NotFoundPage.js';\r\nimport CommentsList from '../Components/CommentsList.js';\r\nimport UpvotesSection from '../Components/UpvotesSection.js';\r\nimport AddCommentForm from '../Components/AddCommentForm';\r\n\r\nconst ArticlePage = ( {match} ) => {\r\n    /* Pull out the name part of the params URL.  */\r\n    const name = match.params.name;\r\n    /* Pass in a test function to the array find function.  \r\n       The test function takes the current element if returns true it returns the matched element or if no matches undefined. */\r\n    const article = articleContent.find(article => article.name === name);\r\n\r\n    // Use react hooks to save article info to component state. Initialise it with zero upvotes and no comments.\r\n    const [articleInfo, setArticleInfo] = useState({ upvotes: 0, comments: [] });\r\n    // Use Effect is called whenever the react compnent is loaded - use it to perform side effect operations eg API calls.\r\n    // Because we are updating internal state it will continuously be called, however the 2nd array parameter tells\r\n    //use effect what to watch and only call it if it changes i.e. the URL name.\r\n    useEffect( () => {\r\n      // Have to define a async function within useEffect to perform fetch (defaults to a GET) .\r\n      const fetchData = async () => {\r\n         const result = await fetch(`/api/articles/${name}`);\r\n         const body = await result.json();\r\n         setArticleInfo(body);\r\n      } \r\n      fetchData();\r\n    }, [name] );\r\n\r\n\r\n    if (typeof article === 'undefined') { return (<NotFoundPage />) };\r\n\r\n\r\n    /* Filter the array so it doesn't return the current article. */\r\n    const otherArticles = articleContent.filter( article => (article.name !== name));\r\n    return (\r\n        <React.Fragment>\r\n                <h1>{article.title}</h1>\r\n                <UpvotesSection articleName={name} upvotes={articleInfo.upvotes} setArticleInfo={setArticleInfo} />\r\n                {/* Article content is an array of string paragraphs. Use the Map function to return paragraphs. */}\r\n                {article.content.map( (paragraph, key) => (\r\n                    <p key={key}>{paragraph}</p>                \r\n                 ) ) }\r\n                 <CommentsList comments={articleInfo.comments} />\r\n                 <AddCommentForm articleName={name} setArticleInfo={setArticleInfo} />\r\n                <h2>With no paragraph map function</h2>\r\n                <p>{article.content}</p>   \r\n                <h3>Other Articles</h3>            \r\n                <ArticlesList articles={otherArticles} />\r\n        </React.Fragment>\r\n   );\r\n}\r\n\r\nexport default ArticlePage;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NavBar = () => {\r\n    return (\r\n    <nav>\r\n        <ul>\r\n            <li>\r\n                <Link to=\"/\">Home</Link>\r\n                <Link to=\"/About\">About</Link>\r\n                <Link to=\"/ArticlesListPage\">Articles</Link>\r\n                <Link to=\"/Article\"></Link>\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;","// import logo from './logo.svg';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport HomePage from './Pages/HomePage.js';\nimport AboutPage from './Pages/AboutPage.js';\nimport ArticlesListPage from './Pages/ArticlesListPage.js';\nimport ArticlePage from './Pages/ArticlePage.js';\nimport NavBar from './NavBar.js';\nimport NotFoundPage from './Pages/NotFoundPage.js';\n\n\nimport './App.css';\n\nfunction App() {\n  return (\n    /* Wrap our entire app with Router make sure insync with URL navigation. */ \n    <Router>\n      <div className=\"App\">\n        <NavBar />\n        <div id=\"page-body\">\n        { /* Switch - only one route rendered at a time. Make sure Not Found is last.   */ }  \n        <Switch>\n          <Route path=\"/\" component={HomePage} exact />  \n          <Route path=\"/About\" component={AboutPage} />  \n          <Route path=\"/ArticlesListPage\" component={ArticlesListPage} />  \n          {/* Pass a parameter from the URL called name - defines the article to view. */}\n          <Route path=\"/Article/:name\" component={ArticlePage} />  \n          { /* If didn't use Switch it would display on all pages because not path.   */ }\n          <Route component={NotFoundPage} />\n        </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'whatwg-fetch';  // Library that enables fetch on IE browser.\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}